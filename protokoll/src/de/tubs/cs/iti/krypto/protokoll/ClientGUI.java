/* Generated by Together */

package de.tubs.cs.iti.krypto.protokoll;

import java.awt.*;
import java.awt.event.*;
import java.io.*;

/**
 * Die Klasse ClientGUI stellt die grafische Oberflaeche des Clients dar.
 * Hier werden die Funktionen des Clients fuer den Anwender zugreifbar.
 * Servername, Spielname und Portnummer werden in der grafischen Oberflaeche
 * eingegeben und der Benutzer wird durch Druecken des Buttons "mit Server
 * verbinden" mit dem Server verbunden. Wenn er als erster Spieler
 * am Server angemeldet ist, hat er auch das Recht, das Spiel zu starten.
 * Sonst muss er auf den Spielstart durch einen anderen Mitspieler warten.
 * Ausserdem wird jedem Button ein eigener Event-Listener zugeteilt.
 * @author Marcus Lagemann
 * @version 1b
 */

public class ClientGUI extends Frame implements Runnable {

    private int port;
    private String host;

    private boolean isGameLoaded;
    private boolean isServerOk;
    private boolean isPortOk;
    private String nameOfGUI ;
    private Client client;

    /** Die Methode setzt ein neues Client-Objekt
     *  @param newClient zu setztender Client
     */
    public void setClient( Client newClient ) {
        client = newClient;
    }

    /** Die Methode ruft die blockierende Methode connect() vom Client auf.*/
    public void run() {
        client.connect();
    }

    /**
     * Konstruktor der die GUI anzeigt und steuert.
     * @param initialPort Anfangswert des Ports
     * @param initialHost Anfangswert des Hosts
     */
    public ClientGUI( int initialPort, String initialHost ) {
        super( "RoughNetz Client" );
        port = initialPort;
        host = initialHost;
        isServerOk = true;
        isPortOk = true;

        try {
            jbInit();
        } catch ( Exception e ) {
            e.printStackTrace();
        }
    }


    //Die Elemente der GUI.
    private Button clientExit = new Button();
    private Button connectToServer = new Button();
    private Button startGame = new Button();
    private TextField serverName = new TextField();
    private TextField theGameClass = new TextField();
    private TextField portNumber = new TextField();
    private Choice oldServers = new Choice();
    private Choice oldGames = new Choice();
    private GridBagLayout gridBagLayout1 = new GridBagLayout();
    private Label output = new Label();
    Label header = new Label();
    Label ServerLabel = new Label();
    Label protocolLabel = new Label();

    /**
     * Hier wird die Graphische Oberflaeche initialisiert.
     */
    private void jbInit() throws Exception {

        setSize( 500, 400 );
        setLocation( ( getToolkit().getScreenSize().width - this.getWidth() ) / 2,
                     ( getToolkit().getScreenSize().height - this.getHeight() ) / 2 );
        setLayout( gridBagLayout1 );
        setBackground( new Color( 0, 0, 120 ) );
        serverName.setBackground( new Color( 131, 171, 255 ) );
        serverName.setText( host );
        serverName.addKeyListener( new java.awt.event.KeyAdapter() {
                                       public void keyReleased( KeyEvent e ) {
                                           serverNameKeyReleased( e );
                                       }
                                   }

                                 );

        theGameClass.setBackground( new Color( 131, 171, 255 ) );
        theGameClass.setText( "Kniffel.Kniffel" );
        theGameClass.addKeyListener( new java.awt.event.KeyAdapter() {
                                         public void keyReleased( KeyEvent e ) {
                                             theGameClassKeyReleased( e );
                                         }
                                     }

                                   );

        portNumber.setBackground( new Color( 131, 171, 255 ) );
        portNumber.setText( String.valueOf( port ) );
        portNumber.addKeyListener( new java.awt.event.KeyAdapter() {
                                       public void keyReleased( KeyEvent e ) {
                                           portNumberKeyReleased( e );
                                       }
                                   }

                                 );

        startGame.setBackground( new Color( 0, 118, 184 ) );
        startGame.setEnabled( false );
        startGame.setFont( new java.awt.Font( "SansSerif", 1, 12 ) );
        startGame.setLabel( "Spiel starten" );
        startGame.addActionListener( new java.awt.event.ActionListener() {
                                         public void actionPerformed( ActionEvent e ) {
                                             startGameActionPerformed( e );
                                         }
                                     }

                                   );

        clientExit.setBackground( new Color( 0, 118, 184 ) );
        clientExit.setFont( new java.awt.Font( "SansSerif", 1, 12 ) );
        clientExit.setLabel( "Client beenden" );
        clientExit.addActionListener( new java.awt.event.ActionListener() {
                                          public void actionPerformed( ActionEvent e ) {
                                              clientExitActionPerformed( e );
                                          }
                                      }

                                    );

        connectToServer.setBackground( new Color( 0, 118, 184 ) );
        connectToServer.setEnabled( false );
        connectToServer.setFont( new java.awt.Font( "SansSerif", 1, 12 ) );
        connectToServer.setLabel( "Mit Server verbinden" );
        connectToServer.addActionListener( new java.awt.event.ActionListener() {
                                               public void actionPerformed( ActionEvent e ) {
                                                   connectToServerActionPerformed( e );
                                               }
                                           }

                                         );

        initHistory( oldGames, "protocolHistory.txt" );

        if ( oldGames.getItemCount() == 0 )
            oldGames.addItem( theGameClass.getText() );

        theGameClass.setText( "" );

        oldGames.setBackground( new Color( 131, 171, 255 ) );

        oldGames.addItemListener( new java.awt.event.ItemListener() {
                                      public void itemStateChanged( ItemEvent e ) {
                                          oldGamesItemStateChanged( e );
                                      }
                                  }

                                );

        initHistory( oldServers, "serverNameHistory.txt" );

        if ( oldServers.getItemCount() == 0 )
            oldServers.addItem( serverName.getText() );

        oldServers.setBackground( new Color( 131, 171, 255 ) );

        oldServers.addItemListener( new java.awt.event.ItemListener() {
                                        public void itemStateChanged( ItemEvent e ) {
                                            oldServersItemStateChanged( e );
                                        }
                                    }

                                  );

        output.setAlignment( 1 );
        output.setBackground( new Color( 131, 171, 255 ) );
        output.setText( "Willkommen auf dem RoughNetz Client ( Version 1b) !" );
        output.setSize( 400, 20 );

        header.setAlignment( 1 );
        header.setBackground( new Color( 131, 171, 255 ) );
        header.setText( "Bitte Server- und Spielname  eingeben und mit Server verbinden." );
        ServerLabel.setBackground( new Color( 0, 0, 120 ) );
        ServerLabel.setFont( new java.awt.Font( "SansSerif", 1, 16 ) );
        ServerLabel.setForeground( new Color( 131, 171, 255 ) );
        ServerLabel.setText( "Servername :" );
        protocolLabel.setBackground( new Color( 0, 0, 120 ) );
        protocolLabel.setFont( new java.awt.Font( "SansSerif", 1, 16 ) );
        protocolLabel.setForeground( new Color( 131, 171, 255 ) );
        protocolLabel.setText( "Protokollname :" );
        this.add( serverName, new GridBagConstraints( 0, 3, 1, 1, 1.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets( 0, 10, 20, 10 ), 10, 5 ) );
        this.add( theGameClass, new GridBagConstraints( 1, 3, 1, 1, 1.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets( 0, 10, 20, 10 ), 18, 5 ) );
        this.add( portNumber, new GridBagConstraints( 2, 3, 1, 1, 1.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets( 0, 10, 20, 10 ), 4, 5 ) );
        this.add( oldServers, new GridBagConstraints( 0, 4, 1, 1, 1.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets( 0, 10, 20, 10 ), 10, 6 ) );
        this.add( oldGames, new GridBagConstraints( 1, 4, 1, 1, 1.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.HORIZONTAL, new Insets( 0, 10, 20, 10 ), 18, 5 ) );
        this.add( startGame, new GridBagConstraints( 1, 5, 1, 1, 0.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets( 10, 0, 0, 0 ), 10, 10 ) );
        this.add( connectToServer, new GridBagConstraints( 0, 5, 1, 1, 0.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets( 10, 0, 0, 0 ), 0, 10 ) );
        this.add( clientExit, new GridBagConstraints( 1, 6, 2, 1, 0.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets( 30, 0, 0, 0 ), 0, 10 ) );
        this.add( output, new GridBagConstraints( 0, 7, 3, 1, 1.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets( 5, 5, 0, 5 ), 1, 0 ) );
        this.add( header, new GridBagConstraints( 0, 0, 3, 1, 1.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets( 5, 5, 0, 5 ), 1, 0 ) );
        this.add( ServerLabel, new GridBagConstraints( 0, 1, 1, 1, 0.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets( 10, 10, 0, 10 ), 0, 0 ) );
        this.add( protocolLabel, new GridBagConstraints( 1, 1, 1, 1, 0.0, 0.0
                  , GridBagConstraints.CENTER, GridBagConstraints.NONE, new Insets( 10, 10, 0, 10 ), 18, 0 ) );
        this.setVisible( true );
        this.setResizable( false );
    }

    /** Die Methode rudt die Methode "startGame()" vom Client auf*/
    void startGameActionPerformed( ActionEvent e ) {
        client.startGame();
    }

    /**
     * Die Methode uebergibt die "ClientGUI" einem neuen Thread und startet die
     * Methode "run()". Vorher wird versucht, das Spiel mit dem Namen im Feld
     * "theGameClass" zu laden. Ausserdem wird die PortNummer ueberprueft,
     * Servername und Protokollname werden mit "addHistoryItem()" der jeweiligen
     * History Datei hinzugefuegt.
     */
    void connectToServerActionPerformed( ActionEvent e ) {
        boolean allOk = true;

        client.setHost( serverName.getText() );
        addHistoryItem( oldServers, "serverNameHistory.txt", serverName.getText() );

        if ( !( client.loadGame( theGameClass.getText() ) ) ) {
            allOk = false;
        } else {
            client.setProtocolName( theGameClass.getText() );
            printOutput( "Protokoll " + theGameClass.getText() + " geladen !" );
            addHistoryItem( oldGames, "protocolHistory.txt", theGameClass.getText() );
        }

        try {
            client.setPort( Integer.parseInt( portNumber.getText() ) );

            if ( ( Integer.parseInt( portNumber.getText() ) < 1024 ) ||
                    ( Integer.parseInt( portNumber.getText() ) > 9999 ) ) {
                allOk = false;
                printOutput( "Keine gueltige Port Nummer!" );
            }
        } catch ( java.lang.NumberFormatException ex ) {
            System.err.print( "Error:" + ex );
            client.log( "Error:" + ex + "\n invalid PortNumber" );
            printOutput( "Keine gueltige Port Nummer!" );
            allOk = false;
        } //catch

        if ( allOk ) {
            Thread t = new Thread( this );
            t.start();
        }

    }

    /**Ruft beim Client die Methode exit() auf*/
    void clientExitActionPerformed( ActionEvent e ) {
        popUpWindow dialog = new popUpWindow( this,
                                              "Wollen Sie den Client wirklich beenden?" );

        if ( dialog.getResult() ) {
            client.exit();
        }
    }

    /**
     * Ruft beim Druecken einer Taste im Textfeld "serverName" die Methode
     * "serverNameChanged()" auf.
     * @param KeyEvent e KeyEvent
     */
    void serverNameKeyReleased( KeyEvent e ) {
        serverNameChanged();
    }

    /**
     * Setzt den Ausgewaehlten Namen in das Textfeld und ruft die Methode
     * "serverNameChanged()".
     * @param ItemEvent e ItemEvent
     */
    void oldServersItemStateChanged( ItemEvent e ) {
        serverName.setText( ( String ) e.getItem() );
        serverNameChanged();
    }

    /**
     * Aktiviert den Button "ConnectToServer" falls Port-Nummer, Servername und
     * Protokollname eingegeben sind.
     */
    private void serverNameChanged() {
        if ( client.getCommunicator() != null ) {
            popUpWindow dialog = new popUpWindow( this,
                                                  "Wollen Sie sich wirklich vom Server abmelden ?" );

            if ( dialog.getResult() ) {
                client.disconnect();
            }
        }

        if ( client.getCommunicator() == null ) {
            isServerOk = ( serverName.getText().length() > 0 );

            if ( isGameLoaded && isServerOk && isPortOk ) {
                connectToServer.setEnabled( true );
            } else {
                connectToServer.setEnabled( false );
            }

        } else {
            serverName.setText( client.getHost() );
        }
    }

    /** Ruft beim Druecken einer Taste im Textfeld "theGameClass" die Methode
     *  "gameNameChanged()" auf.
     * @param KeyEvent e KeyEvent
     */
    void theGameClassKeyReleased( KeyEvent e ) {
        gameNameChanged();
    }

    /**
     * Setzt den Ausgewaehlten Namen in das Textfeld und ruft "gameNameChanged()"
     * auf.
     * @param ItemEvent e ItemEvent
     */
    void oldGamesItemStateChanged( ItemEvent e ) {
        theGameClass.setText( ( String ) e.getItem() );
        gameNameChanged();
    }

    /**
     * Aktiviert den Button "ConnectToServer" falls Port-Nummer, Servername und
     * Protokollname eingegeben sind.
     */
    private void gameNameChanged() {
        if ( client.getCommunicator() != null ) {
            popUpWindow dialog = new popUpWindow( this,
                                                  "Wollen Sie sich wirklich vom Server abmelden ?" );

            if ( dialog.getResult() ) {
                client.disconnect();
            }
        }

        if ( client.getCommunicator() == null ) {
            isGameLoaded = ( theGameClass.getText().length() > 0 );

            if ( isGameLoaded && isServerOk && isPortOk ) {
                connectToServer.setEnabled( true );
            } else {
                connectToServer.setEnabled( false );
            }
        } else {
            theGameClass.setText( client.getProtocolName() );
        }
    }

    /**
     * Aktiviert den Button "ConnectToServer" falls Port-Nummer, Servername und
     * Protokollname eingegeben sind. <br>
     */
    void portNumberKeyReleased( KeyEvent e ) {
        if ( client.getCommunicator() != null ) {
            popUpWindow dialog = new popUpWindow( this,
                                                  "Wollen Sie sich wirklich vom Server abmelden ?" );

            if ( dialog.getResult() ) {
                client.disconnect();
            }
        }

        if ( client.getCommunicator() == null ) {
            isPortOk = ( portNumber.getText().length() > 0 );

            if ( isGameLoaded && isServerOk && isPortOk ) {
                connectToServer.setEnabled( true );
            } else {
                connectToServer.setEnabled( false );
            }
        } else {
            portNumber.setText( client.getPort() + "" );
        }
    }

    /**Die Methode aktiviert bzw. deaktiviert den Button "startGame"
     * @param starting Status auf den der Button gesetzt werden soll
     */
    public void enableStartGame( boolean starting ) {
        startGame.setEnabled( starting );
    }

    /**Die Methode aktiviert bzw. deaktiviert den Button "connectToServer"
     * @param starting Status auf den der Button gesetzt werden soll
     */
    public void enableConnectToServer( boolean starting ) {
        connectToServer.setEnabled( starting );
    }

    /**
     * Versucht eine Datei mit dem Namen "historyFile" zu lesen und fuegt die Namen
     * aus dieser Datei dem Choice Objekt hinzu.
     * @param choiceHistory Choice-Objekt, dem die History-Eintraege zugewiesen
     * werden sollen.
     * @param historyFile Name der Datei die die History-Eintraege speichert.
     */
    void initHistory( Choice choiceHistory, String historyFile ) {

        try {
            String line = new String();
            BufferedReader history =
                new BufferedReader( new FileReader( historyFile ) );

            while ( ( line = history.readLine() ) != null ) {
                choiceHistory.addItem( line );
                System.out.println( "History.addItem:" + line );

            }

            history.close();
        }

        //Wenn noch keine History-Datei gefunden wurde, neue leere Datei anlegen.
        catch ( IOException ex ) {
            System.out.println( "FNF Error: " + ex );

            try {
                BufferedWriter fw =
                    new BufferedWriter( new FileWriter( historyFile ) );

                fw.close();
            } catch ( IOException exe ) {
                System.out.println( "FNF Error: " + exe );

            }
        }
    }

    /**
     * Liest eine Datei mit dem Namen "historyFile" zu lesen, fuegt den Namen
     * "newItem" des neuen History-Eintrags der Datei zu, sofern noch nicht
     * vorhanden und fuegt ihn ausserdem  dem Choice Objekt hinzu.
     * @param choiceHistory Choice-Objekt, dem die History-Eintraegezugewiesen
     * werden sollen.
     * @param historyFile Name der Datei die die History-Eintraege speichert.
     * @param newItem Name des Items das hinzugefuegt werden soll.
     */

    void addHistoryItem( Choice choiceHistory, String historyFile, String newItem ) {
        boolean alreadyInHistory = false;

        try {
            String line = new String();
            BufferedReader history =
                new BufferedReader( new FileReader( historyFile ) );

            while ( ( line = history.readLine() ) != null ) {
                if ( line.equals( newItem ) )
                    alreadyInHistory = true;

            }

            history.close();
        } catch ( IOException ex ) {
            System.out.println( "FNF Error: " + ex );
            client.log( "FNF Error: " + ex );
        }

        if ( !alreadyInHistory ) {
            try {
                BufferedWriter fw =
                    new BufferedWriter( new FileWriter( historyFile, true ) );
                fw.write( newItem + "\n" );
                fw.close();
                choiceHistory.addItem( newItem );
                System.out.println( "History.addItem:" + newItem );
                client.log( "History.addItem:" + newItem );
            } catch ( IOException exe ) {
                System.out.println( "FNF Error: " + exe );
                client.log( "FNF Error: " + exe );
            }
        }
    }

    /**
     * Die Methode schreibt den im String "text" angegebenen Text auf das Label
     * output. <br> Wenn der Client bereits am Server angemeldet ist wird die
     * Spielernummer vor dem Text mitausgegeben. Wenn ein leerer String
     * uebergeben wird, wird nur die Spielernummer erneuert.
     * @param text Text, der ausgegeben werden soll
     */
    void printOutput( String text ) {
        String preText;

        if ( client.getCommunicator() != null ) {
            preText = "Spieler " + ( client.getCommunicator().myNumber() + 1 ) +
                      "(Anzahl der Spieler :" + client.getCommunicator().playerNumber() + ") : ";
        } else
            preText = "";

        if ( text.equals( "" ) ) {

            text = output.getText().substring( output.getText().indexOf( ": " ) + 2 );
            System.out.println( text );
        }

        output.setText( preText + text );
    }
}

//
// $Log: ClientGUI.java,v $
// Revision 1.12  2001/07/04 22:09:47  y0013406
// changed javadoc comments
//
// Revision 1.11  2001/07/03 23:42:40  y0013406
// added some logging
//
// Revision 1.10  2001/07/03 23:04:36  y0013406
// minor updates
//
// Revision 1.9  2001/07/02 21:08:15  y0013406
// changed comments and tex-files
//
// Revision 1.8  2001/07/01 18:23:42  y0013406
// theGameClassKeyPressed() changed to theGameClassKeyReleased()
// serverNameKeyPressed() changed to ServerNameKeyReleased()
// portNumberKeyPressed() changed to portNumberKeyReleased()
// changed method serverNameChanged()
// changed method gameNameChanged()
// changed method connectToServer()
//
// Revision 1.7  2001/06/27 18:26:31  y0013406
// added usage of dialogs to Methods portNumberKeyPressed(),
// clientExitActionPerformed(), gameNameChanged() and serverNameChanged()
// changed method printOutput() (can now update PlayerNumber in Label output)
//
// Revision 1.6  2001/06/21 15:21:38  y0013406
// added method printOutput
// added Label Output
// changed Comments
//
// Revision 1.5  2001/06/21 14:01:29  y0013406
// changed Button texts
//
// Revision 1.4  2001/06/21 09:13:43  y0013406
// initial Textfield Settings Changed
//
// Revision 1.3  2001/06/19 15:13:11  y0013406
// changed gameNameChanged()
//
// Revision 1.2  2001/06/19 14:47:21  y0013406
// changed ServerTextField contents
//
// Revision 1.1  2001/06/18 22:07:29  y0013406
// added Client and Client to Package stuff!
//
// Revision 1.9  2001/06/18 09:37:49  y0013155
// improved debug output, Kniffel uses its communicator.
// Marco
//
// Revision 1.8  2001/06/18 00:01:24  y0013406
// method startGameActionPerformed() added
// now runs with the real protocol Kniffel!
//
// Revision 1.7  2001/06/17 23:17:18  y0013406
// method jbInit() changed
// added several comments
// should be ready for testing
//
// Revision 1.6  2001/06/17 21:05:17  y0013155
// Kniffel.java ist lauffaehig, allerdings sind an einigen Stellen noch Dummys.
// Der Gesamtspielablauf funktioniert aber bereits.
// Marco
//
// Revision 1.5  2001/06/14 18:39:20  y0013406
// added methods in Client und ClientGUI
//
